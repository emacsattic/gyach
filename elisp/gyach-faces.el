;;; gyach-faces.el --- face definitions for ElGyach

;; Copyright (C) 2003  Free Software Foundation, Inc.

;; Author: Matthew Kennedy <mbkennedy@austin.rr.com>
;; Keywords: convenience

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;; Commentary:

;; Inspired by the default face settings in ERC.

;;; Code:

(require 'gyach-highlight)
(require 'gyach-custom)
(require 'gyach-room)

(defgroup gyach-faces nil
  "Faces for ERC."
  :group 'gyach)

(defface gyach-default-face '((t))
  "ElGyach default face."
  :group 'gyach-faces)

(defface gyach-event-face '((t (:bold t :foreground "SlateBlue")))
  "ElGyach event face.
`gyach-event-face' defines the face to use for enter/leave messages etc."
  :group 'gyach-faces)

(defface gyach-action-face '((t (:bold t)))
  "ElGyach face for actions generated by /me or the : prefix."
  :group 'gyach-faces)

(defface gyach-username-face '((t (:bold t)))
  "ElGyach username face."
  :group 'gyach-faces)

(defface gyach-input-face '((t (:foreground "brown")))
  "ElGyach face used for your input."
  :group 'gyach-faces)

(defface gyach-input-username-face '((t (:bold t :foreground "brown")))
  "ElGyach face used for rendering username in your input."
  :group 'gyach-faces)

(defface gyach-private-message-username-face '((t (:bold t :foreground "IndianRed")))
  "ElGyach face used for rendering the username in private messages"
  :group 'gyach-faces)

(defface gyach-private-message-face '((t (:foreground "IndianRed")))
  "ElGyach face used for rendering private messages"
  :group 'gyach-faces)

(defcustom gyach-default-highlight-color "lemon chiffon"
  "The default color for highlighting. ie. when the user issues
  \"/highlight username\" without giving the color argument."
  :group 'gyach
  :type 'string)

(defface gyach-highlight-default-face '((t (:inherit 'gyach-default-face :background "yellow")))
  "ElGyach face for highlightable default posts"
  :group 'gyach-faces)

(defface gyach-timestamp-face '((t (:forground "gray")))
  "ElGyach face for the timestamping."
  :group 'gyach-faces)

(defface gyach-highlight-action-face '((t (:inherit 'gyach-action-face :background "yellow")))
  "ElGyach face for highlightable action posts"
  :group 'gyach-faces)

(defface gyach-highlight-username-face '((t (:inherit 'gyach-username-face :background "yellow")))
  "ElGyach face for highlightable usernames"
  :group 'gyach-faces)

(defface gyach-server-info-face '((t (:bold t :foreground "orange")))
  "ElGyach server information face."
  :group 'gyach-faces)


(defun gyach-clean-username (username)
  "Clean text in USERNAME for rendering purposes.
Currently, this does nothing."
  username)

(defun gyach-replace-usernames (string username-face)
  (with-temp-buffer
    (erase-buffer)
    (insert string)
    (goto-char (point-min))
    (dolist (user (gyach-room-list))
      (while (search-forward user  nil t)
	(replace-match (propertize (gyach-clean-username user) 'face username-face) nil t)))
    (buffer-string)))

(defun gyach-unescape-newlines (string)
  "Replace instances of \\n with \\\\n in STRING."
  (let ((result))
    (setq result (replace-regexp-in-string (concat "\\\\" "n") "\n" string))
    result))

(defun gyach-replace-trailing-newlines (string)
  "Replace end-of-string newline characters with nothing."
  (replace-regexp-in-string "\n$" "" string))

(defun gyach-lookup-highlight-color (username)
  (or (cdr (assoc username gyach-highlight-table))
      gyach-default-highlight-color))


(defun gyach-render-action (user text)
  (let* ((user (gyach-clean-username user))
	 (input (equal user gyach-yahoo-username)))
    (concat 
     (if (gyach-is-highlightable user text)
	 (concat (propertize (concat "* " user) 'face 'gyach-highlight-username-face)
		 (gyach-replace-usernames
		  (propertize (concat " " text) 'face 'gyach-highlight-action-face)
		  'gyach-highlight-username-face))
       (concat (propertize (concat "* " user) 'face 'gyach-username-face)
	       (gyach-replace-usernames
		(propertize (concat " " text) 'face 'gyach-action-face)
		'gyach-username-face))) "\n")))

(defun gyach-render-default (user text)
  (let* ((user (gyach-clean-username user))
	 (input (equal user gyach-yahoo-username)))
    (concat 
     (if (gyach-is-highlightable user text)
	 (concat (propertize (concat "<" user ">") 'face 'gyach-highlight-username-face)
		 (gyach-replace-usernames
		  (propertize (concat " " text) 'face 'gyach-highlight-default-face) 
		  'gyach-highlight-username-face))
       (concat (propertize (concat "<" user ">") 'face 'gyach-username-face)
	       (gyach-replace-usernames
		(propertize (concat " " text) 'face (if input 
							'gyach-input-face 
						      'gyach-default-face))
		(if input 
		    'gyach-input-username-face 
		  'gyach-username-face)))) "\n")))

(defun gyach-render-leave (user)
  (let ((user (gyach-clean-username user)))
    (concat (propertize 
	     (concat "*** " user " left the room") 'face 'gyach-event-face) "\n")))

(defun gyach-render-enter (user)
  (let ((user (gyach-clean-username user)))
    (concat (propertize 
	     (concat "*** " user " entered the room") 'face 'gyach-event-face) "\n")))

(defun gyach-render-server (text)
  (propertize (concat "*** " text) 'face 'gyach-server-info-face))

(defun gyach-render-login-response (text)
  (gyach-render-server text))

(provide 'gyach-faces)

;;; gyach-faces.el ends here
